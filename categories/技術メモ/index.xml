<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技術メモ on naonya3.me</title>
    <link>http://naonya3.me/categories/%E6%8A%80%E8%A1%93%E3%83%A1%E3%83%A2/</link>
    <description>Recent content in 技術メモ on naonya3.me</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>naonya3 All rights reserved.</copyright>
    <lastBuildDate>Thu, 25 Jun 2015 13:30:19 +0900</lastBuildDate>
    
	<atom:link href="http://naonya3.me/categories/%E6%8A%80%E8%A1%93%E3%83%A1%E3%83%A2/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AtomエディターでSass&#43;Compassの確認を楽にやりたい</title>
      <link>http://naonya3.me/post/2015/06/25/atom-compass/</link>
      <pubDate>Thu, 25 Jun 2015 13:30:19 +0900</pubDate>
      
      <guid>http://naonya3.me/post/2015/06/25/atom-compass/</guid>
      <description>せっかくブログを更新したので、最近のHTMLの勉強を兼ねてThemeでもいじってみようと思いたった。
そこで、SassとかCompassとかつかってCSSを書きたい。
SassとかCompassはコンパイルしてCSSを生成する。なので実際に確認するためには都度コンパイルする必要がある。
編集して保存したら勝手にコンパイルしておいて欲しい。
Atomエディターでコレをやる方法が私のググり力では見つけられなかったので、以下のようにした。
SassとかCompassは事前にインストールしてあるとする。
buildプラグインをつかえば簡単 保存のタイミングで処理を走らせるのにAtomのbuildプラグインが便利そうなのでこれを使う。
build
プロジェクト直下にbuild用の設定ファイルを用意して、そこにCompassをコンパイルするように書いておけばいい。
.atom-build.jsonというファイル名で
{ &amp;quot;name&amp;quot;:&amp;quot;Compile Compass&amp;quot;, &amp;quot;cmd&amp;quot;:&amp;quot;compass&amp;quot;, &amp;quot;args&amp;quot;:[&amp;quot;compile&amp;quot;] }  あとはbuildの設定画面で、保存時に処理を走らせるチェックをonにしておくだけ。
注意点 一点罠があり、Atomエディターはアイコンをクリックして起動させるとPathが自分の期待通りに通ってない（= Atom上でcompassコマンドが叩けない）ので
atomコマンドから起動する必要があった。そうすれば期待通りにPathが通っている。
Macユーザーならターミナルを起動してatomと打ってEnterを押すだけ。
ほかの環境でどうなってるかはしらん。
参考:Atomでパスが通らない</description>
    </item>
    
    <item>
      <title>Hugoのデプロイ</title>
      <link>http://naonya3.me/post/2015/06/24/deploy-hugo/</link>
      <pubDate>Wed, 24 Jun 2015 13:05:15 +0900</pubDate>
      
      <guid>http://naonya3.me/post/2015/06/24/deploy-hugo/</guid>
      <description>HugoはOctopressと違ってデプロイのためのツールは内包されていない。
ので、自分で考える必要がある。
作業的にはhugo -t [ThemeName]で生成されたpublicディレクトリの内容をアップするだけなので難しくない。
githab page上で公開するならpublicディレクトリ以下をpushすればいい。
ググればデプロイサービスを使う方法なども出てくる。便利なサービスだなぁ。
楽ちんなのはpublic以下をgithub pageのgitリポジトリとしてしまって、
hugo -t [themename] cd public/ git add -A git commit -am &amp;quot;new post&amp;quot;  的な事をすればいい。処理をまとめておけば、次から更に楽なのでは。
あとはソースをまるごとDropBoxにでも突っ込んでおけばいいと思う。</description>
    </item>
    
  </channel>
</rss>
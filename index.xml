<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>naonya3.me</title>
    <link>http://naonya3.me/</link>
    <description>Recent content on naonya3.me</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>naonya3 All rights reserved.</copyright>
    <lastBuildDate>Thu, 29 Jun 2017 20:05:07 +0900</lastBuildDate>
    
	<atom:link href="http://naonya3.me/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>日記書きやすくするためにCLIツール作った</title>
      <link>http://naonya3.me/post/2017/06/29/cli/</link>
      <pubDate>Thu, 29 Jun 2017 20:05:07 +0900</pubDate>
      
      <guid>http://naonya3.me/post/2017/06/29/cli/</guid>
      <description>文章を書くという機能のレベルが小学生で止まってしまっている
僕は知的な文章を書いてブイブイ言わせたいフレンズなのでとにかく練習をするぞわーい
そのためには書くための心理的ハードルを下げる必要があった
このblogはhugoで作っている
hugo自体は難しくないのだけど
$ hugo new post/自分で決めたフォーマット/ファイル名.md
みたいなことをやるのが僕には辛かった
ファイル名を渡すだけでよしなにしてくれるツールが必要だった
だからgoでつくった
ついでにdeploy作業もやってくれるようにした
もうぼくは知的な文章を書くためのスタートラインに立っていると言ってしまえるだろうし
なんなら知的な文章製造人間だと呼んでしまっても過言ではないのだろうか？</description>
    </item>
    
    <item>
      <title>hello</title>
      <link>http://naonya3.me/post/2017/6/19/</link>
      <pubDate>Mon, 19 Jun 2017 18:26:51 +0900</pubDate>
      
      <guid>http://naonya3.me/post/2017/6/19/</guid>
      <description> test test test </description>
    </item>
    
    <item>
      <title>AtomエディターでSass&#43;Compassの確認を楽にやりたい</title>
      <link>http://naonya3.me/post/2015/06/25/atom-compass/</link>
      <pubDate>Thu, 25 Jun 2015 13:30:19 +0900</pubDate>
      
      <guid>http://naonya3.me/post/2015/06/25/atom-compass/</guid>
      <description>せっかくブログを更新したので、最近のHTMLの勉強を兼ねてThemeでもいじってみようと思いたった。
そこで、SassとかCompassとかつかってCSSを書きたい。
SassとかCompassはコンパイルしてCSSを生成する。なので実際に確認するためには都度コンパイルする必要がある。
編集して保存したら勝手にコンパイルしておいて欲しい。
Atomエディターでコレをやる方法が私のググり力では見つけられなかったので、以下のようにした。
SassとかCompassは事前にインストールしてあるとする。
buildプラグインをつかえば簡単 保存のタイミングで処理を走らせるのにAtomのbuildプラグインが便利そうなのでこれを使う。
build
プロジェクト直下にbuild用の設定ファイルを用意して、そこにCompassをコンパイルするように書いておけばいい。
.atom-build.jsonというファイル名で
{ &amp;quot;name&amp;quot;:&amp;quot;Compile Compass&amp;quot;, &amp;quot;cmd&amp;quot;:&amp;quot;compass&amp;quot;, &amp;quot;args&amp;quot;:[&amp;quot;compile&amp;quot;] }  あとはbuildの設定画面で、保存時に処理を走らせるチェックをonにしておくだけ。
注意点 一点罠があり、Atomエディターはアイコンをクリックして起動させるとPathが自分の期待通りに通ってない（= Atom上でcompassコマンドが叩けない）ので
atomコマンドから起動する必要があった。そうすれば期待通りにPathが通っている。
Macユーザーならターミナルを起動してatomと打ってEnterを押すだけ。
ほかの環境でどうなってるかはしらん。
参考:Atomでパスが通らない</description>
    </item>
    
    <item>
      <title>Hugoのデプロイ</title>
      <link>http://naonya3.me/post/2015/06/24/deploy-hugo/</link>
      <pubDate>Wed, 24 Jun 2015 13:05:15 +0900</pubDate>
      
      <guid>http://naonya3.me/post/2015/06/24/deploy-hugo/</guid>
      <description>HugoはOctopressと違ってデプロイのためのツールは内包されていない。
ので、自分で考える必要がある。
作業的にはhugo -t [ThemeName]で生成されたpublicディレクトリの内容をアップするだけなので難しくない。
githab page上で公開するならpublicディレクトリ以下をpushすればいい。
ググればデプロイサービスを使う方法なども出てくる。便利なサービスだなぁ。
楽ちんなのはpublic以下をgithub pageのgitリポジトリとしてしまって、
hugo -t [themename] cd public/ git add -A git commit -am &amp;quot;new post&amp;quot;  的な事をすればいい。処理をまとめておけば、次から更に楽なのでは。
あとはソースをまるごとDropBoxにでも突っ込んでおけばいいと思う。</description>
    </item>
    
    <item>
      <title>Hugoに乗りかえた</title>
      <link>http://naonya3.me/post/2015/06/23/using-hugo/</link>
      <pubDate>Tue, 23 Jun 2015 18:03:29 +0900</pubDate>
      
      <guid>http://naonya3.me/post/2015/06/23/using-hugo/</guid>
      <description>Hugoがいじってて楽しかったので、OctopressからHugoに乗り換え。
あまってたVPSがあったので、ソースはVPSにたてたgitリポジトリで管理して、手元からpushしたらVPS上でhtmlを生成して、public/イカをgithub pageにあげるようにしました。
HugoはGoで作られていて、コンパイルされた物も配布されているのでVPS上でGoの環境を作らなくてよかったのでメッチャ楽。
これでたくさん記事がかけるぞッ()</description>
    </item>
    
    <item>
      <title>子供も大人も楽しめるRomoで遊んできた話</title>
      <link>http://naonya3.me/post/2014/07/14/romo/</link>
      <pubDate>Mon, 14 Jul 2014 17:07:51 +0900</pubDate>
      
      <guid>http://naonya3.me/post/2014/07/14/romo/</guid>
      <description>昨日「iPhone x ロボットハッカソン 大人の夏休みの自由研究 〜Romoで絶対起きられる目覚まし時計を作ろう〜」に参加してきました。
タイトル通り、Romoを使って目覚まし時計を作るハッカソンです。
Romoとは 公式サイト(http://www.romotive.jp/)
つまるところ、iPhoneを挿すと操作できるロボットで、用意されているアプリ以外にも自分でプログラムを書いて操作できちゃいます。
Romo SDKでできること Romoのキャタピラの操作 左右別々に操作するAPIに加え、簡単に前進後退回転を行うためのAPIが用意されています。
RomoのLEDを操作 今回は使いませんでしたが、LEDも操作できます。
RomoのキャラクターUI操作 Romoにはキャラクターがいるのですが、このキャラクターの表情を操作したり、声を出させたりを簡単に行えます。
上記２つはRomoに接続しないと動作しませんが、このAPI郡はRomoが無くても動作します。
とにかく簡単で可愛いので、画面に関してはこのキャラクターを動かしておけばどうにかなります。
当日の様子 会場はHUB Tokyoでした。
会場に着くとRomoが貰え、簡単な挨拶と説明後直ぐに開発がスタート。
堤さんの近くに座っていたのですが、同じ職場に居た頃はあまり近くで開発したことがなかったので楽しかったです。
参加者の皆さん、一日お疲れ様でした！皆さん、独創的なアラームアプリのデモで沢山楽しませて頂きました！ #Romoハッカソン @RomotiveJP pic.twitter.com/XvUOiFU898
&amp;mdash; Spotry.me (@spotryme) 2014, 7月 13 
他にもいろいろな方が記事にされているので、そちらも読んでいただくともっと楽しいかと思います。
 Romoハッカソン with GUILD@ HUBTokyo 【イベント】Romo/ロモのSDKを使ってアラームアプリを作成してみよう！「第一回ROMOハッカソン」にお邪魔してきたので、その様子をたっぷりとお伝えします！ 自作iOSアプリで制御できるロボット、Romo のハッカソンに参加してきました 体感型のエデュケーショナルロボットRomoのハッカソンに行ってきました 自走式のかわいいiPhoneロボ「Romo」のハッカソンに参加してきました iPhoneと合体してかわいく動くRomoをプログラミングするハッカソンに参加してきました！ #Romoハッカソン に参加してきた  作ったもの 目覚まし時計がテーマだったので、Romoを釣ることができるアプリを作りました。
2台のiPhoneを使い、片方をRomoに(魚側)、もう片方を手に持ち(竿側)遊びます。
一応目覚まし時計なので、朝方の方がRomoを釣りやすい設定にしています。 Romoを釣りたかったら早起きするべし、ってことです。
技術的な話をすると、
 MultipeerConnectivityで2台のiPhoneを通信 CoreMotionで竿側のキャスティングやフッキングといった動作を検出  あとは、キャスティング、フッキングなどのイベントをRomoが受け取ったら 前進や後退をさせて釣りっぽく演出しています。
竿側のiPhoneの画面をくるくる触ると糸が巻けて、Romoが近づいてきます。
Romoの画面をタッチするとGetです。
記念撮影などして、リリースしてあげましょう。
池澤あやか賞も貰えて最高です。
お疲れ様でした。Romo可愛いです [pic] — https://t.</description>
    </item>
    
    <item>
      <title>Unity入門記録 03</title>
      <link>http://naonya3.me/post/2014/02/15/unity-practice03/</link>
      <pubDate>Sat, 15 Feb 2014 22:03:29 +0900</pubDate>
      
      <guid>http://naonya3.me/post/2014/02/15/unity-practice03/</guid>
      <description>ブロック崩しを仕上げる 前回に引き続きブロック崩しを進める。 今回はゲームクリアと、ゲームオーバーを実装する。
ゲームオーバーの実装 簡単そうなのでこちらから。
これは前回と同じように当たり判定OnCollisionEnterを使い、下のバーとの当たり判定を見ればいい。
下のバーのGameObjectを取得できればほぼ終わり。
GameObjectを取得する方法でとりあえず知っているのはFindを使う方法だけなので、Hierarchyパネルで下のバーに一意な名前をつけて取得しやすくする。
BottomBarという名前をつけた。
ゲームオーバー画面は後で作るとして、ひとまず「ボールを消す」ということでゲームオーバーを表現した。
コードはこんな感じで、BallController内に実装した。
function OnCollisionEnter(col:Collision) { var blocks = GameObject.Find(&amp;quot;Blocks&amp;quot;); if (col.transform.IsChildOf(blocks.transform)) { Destroy(col.gameObject); } var bottomBar = GameObject.Find(&amp;quot;BottomBar&amp;quot;); if (col.gameObject == bottomBar) { Debug.Log(&amp;quot;Game Over&amp;quot;); Destroy(this.gameObject); } }  BallControllerにゲームオーバー処理などを書いていくのは、プログラムの規模が大きくなると良くないことが起きるのは容易に想像できるが、今回は気にしないでおく。
ゲームクリアの実装 ブロック崩しは、ブロックがなくなったらクリアだ。
すべてのブロックはBlocksの子にしてあるので、Blocksの子が0になったらクリアでいいだろう。
子の数え方がわからないので調べる。
前回の経験上、子関係のものはTransformにありそうなので、ドキュメントのTransformの項を眺めてたらベストなプロパティがあった。
Transform.childCount
これでできそうだ。
function OnCollisionEnter(col:Collision) { var blocks = GameObject.Find(&amp;quot;Blocks&amp;quot;); if (col.transform.IsChildOf(blocks.transform)) { Destroy(col.gameObject); // Check Count of Balls. if (blocks.transform.childCount == 0) { Debug.Log(&amp;quot;Clear!!&amp;quot;); Destroy(this.gameObject); } } var bottomBar = GameObject.</description>
    </item>
    
    <item>
      <title>Unity入門記録 02</title>
      <link>http://naonya3.me/post/2014/02/15/unity-practice02/</link>
      <pubDate>Sat, 15 Feb 2014 04:22:33 +0900</pubDate>
      
      <guid>http://naonya3.me/post/2014/02/15/unity-practice02/</guid>
      <description>ブロック崩しの続き 前回から引き続きチュートリアルのブロック崩しを作っていきます。
ただ、本家のチュートリアルの続きが無いので自分で考えながらです。（日本語しか見てないので、英語版は用意されているのかもしれませんが）
まずはブロックの用意 前回の成果物に圧倒的に足りないもの。
そう、ブロック。
壁を作ったのと同様にしていけば問題ないでしょう。
こんな感じで配置していきます。
これだけで、ボールはブロックに跳ねるようになります。
各ブロックは、Empty Objectを作ってそこに入れていくと管理しやすいでしょう。
Empty Objectはフォルダみたいなものでしょうか。AfterEffectやっている人はNullObjectの概念が非常に近い感じです。
AS3やObjective-C、JS（DOM）だとそれぞれSprite, UIView, divみたいなものを意識するといいかもしれません。
これだけではブロックは消えたりしないので、ボールとの当たり判定を見て自分でブロックを消す必要がありそうです。
Unityにおいての当たり判定の取り方を調べれは良さそうです。
オブジェクト同士の当たり判定を取る 調べてみると、オブジェクト同士が衝突した際に、Rigidbody(前回ボールに設定した)のOnCollisionEnter(col : Collision)メソッドが呼ばれるらしいです。
UnityのCollisionオブジェクトというのがわからないので調べてみると、衝突という意味みたいです。そのままですね。
Collisionには衝突の情報として、衝突対象のGameObjectが格納されてるっぽいので、そのオブジェクトをOnCollisionEnterの中で削除すれば良さそうです。
オブジェクトの削除方法も調べてみました。
Destroy(GameObject)というメソッドを使えばいいっぽいです。
まとめると
function OnCollisionEnter(col:Collision) { Destroy(col.gameObject); }  でしょう。
これを前回のBallControllerに追加してみることに。
#pragma strict var speed = 5; function Start () { rigidbody.AddForce((transform.forward + transform.right) * speed, ForceMode.VelocityChange); } function Update () { } function OnCollisionEnter(col:Collision) { Destroy(col.gameObject); }  これがコード全体です。実行してみます。
Unity WebPlayerが必要です。
おしい。
このままだと無差別殺人なので、当たった対象がブロックかどうか調べる必要がありそうです。
オブジェクトを見分ける どうやってオブジェクトを見分けるか考えてみました。</description>
    </item>
    
    <item>
      <title>Unity入門記録 01</title>
      <link>http://naonya3.me/post/2014/02/03/unity-practice01/</link>
      <pubDate>Mon, 03 Feb 2014 01:30:44 +0900</pubDate>
      
      <guid>http://naonya3.me/post/2014/02/03/unity-practice01/</guid>
      <description>iPhoneプログラマーとして2年間Objective-Cを書いて、その前にFlashを2年。
Unity4.3から2Dゲームも作りやすくなったということなので、趣味ではじめてみようかと。
全く事前知識がないので、初心者の記録として晒しておきます。
途中で飽きてやめたらごめんなさい。
ダウンロード ここからダウンロード。
http://japan.unity3d.com/unity/download/
ちなみに初心者なので無料版で十分（なはず）。
iPhone/Androidにも無料で書き出せるようになったのは制作モチベーション上がる。
起動 サンプルと思われる、すごいゲーム出てきた。
パネルたくさんファイルたくさんで、何したらいいか全くわからん。
見た目で挫折しそう。
チュートリアルあった 本家にドキュメントとチュートリアルがあった。
http://japan.unity3d.com/developer/document/
このチュートリアルをとりあえずやってみる。
http://japan.unity3d.com/developer/document/tutorial/my-first-unity/
ブロック崩しが作れるらしい。
一応出来た Unity Web Playerが必要です。
iPhone用に書き出す せっかくなのでiPhoneで動作させたい。
File &amp;gt; Build Settingからできる。
あとはXcodeプロジェクトが作られるので、開いてビルドすればいいだけ。
ココらへんはUnityというよりiPhone開発の話なので必要ならググるとわかる。
しかし、チュートリアルのままだとiPhone上でキー入力のInputがないので、ラケットの操作ができない。
多分マウス入力の値を見るようにすれば、タッチ座標に変換されるはずなので、
チュートリアルのラケットに対応するスクリプトの
function Update () { rigidbody.AddForce(transform.right * Input.GetAxisRaw(&amp;quot;Horizontal&amp;quot;) * Accel, ForceMode.Impulse); }  このHorizontalの部分をMouse Xに変更した。
function Update () { rigidbody.AddForce(transform.right * Input.GetAxisRaw(&amp;quot;Mouse X&amp;quot;) * Accel, ForceMode.Impulse); }  Mouse Xという値はInput Manager(Edit &amp;gt; Project Settings &amp;gt; Input &amp;gt; inspectorパネル)をみるとわかる。</description>
    </item>
    
    <item>
      <title>IRKit</title>
      <link>http://naonya3.me/post/2014/01/05/irkit/</link>
      <pubDate>Sun, 05 Jan 2014 23:04:00 +0900</pubDate>
      
      <guid>http://naonya3.me/post/2014/01/05/irkit/</guid>
      <description>遠隔操作できる家電リモコン。
お布団の中からリビングのエアコンを入れてみたり 外出先からエアコンを入れてみたり
・・・寒いので、エアコンネタばかり出てきてしまいましたが、、
前職の先輩のmashさんが、そういったことを手軽に行えるようにするデバイス「IRKit」をなんと作り上げてしまったので、お試し版をお借りしました。
まだお試し版ということで、専用アプリがリリースされていなかったりと通常より手順がむずいですが、正式リリース時にはすごく使いやすいデバイスになっていると思います。
たぶんWifiが入っている家なら、IRKitを電源に差し、専用アプリからIRKitにアクセスするだけで使えちゃえます。
ということで、設定して遊んでみました。
IRKitの初期設定 まずはIRKitをWifiに接続するためにアプリをインストールします。
先ほど、専用アプリがリリースされていないと書きましたが、githubにはソースコードがありますので、そちらをインストールして使います。
Minimalというプロジェクトが設定アプリ＋αです。
ビルドにはCocoaPodで必要ライブラリをインストールする必要がありますが、正式版ではあまり関係のない話だと思いますので省略します。
アプリを起動して、画面の指示にしたがって設定するだけです。
と、言ってもたったの3STEPです。
 MicroUSBでIRKitを電源に接続 アプリに接続する無線LANの情報を入力する モールス信号でIRKitに無線LANの設定情報を送る  右はモールス信号を送っている所です。遊び心があってすごい好きです。
設定が完了すると、赤色だったSTATUSランプが青色になります。
IRKitでリモコンの信号を受信する IRKitに向けてリモコンを押すだけです。
先ほどインストールしたMinimalというアプリはリモコンの信号を学習する機能がついていますので、そちらを使えば受信したデータを簡易的に管理することができます。
また、IRKit自身にHTTPサーバがあり、APIが動いていますので 直接APIを叩いて直近のリモコンのデータを取得したり、取得したリデータをIRKitから赤外線で送信させたりする事もできます。
IRKit公式サイトに書いてある情報のままですが、簡単にその方法を書きます
IRKitのAPIを叩いてリモコンデータを取得する まずはIRKitのIPアドレスを取得します $ dns-sd -B _irkit._tcp  このまま打てばok。
$ dns-sd -B _irkit._tcp Browsing for _irkit._tcp DATE: ---Sun 05 Jan 2014--- 19:52:09.254 ...STARTING... Timestamp A/R Flags if Domain Service Type Instance Name 19:52:09.911 Add 2 4 local. _irkit._tcp. irkitd303  Instance Nameの所を見ます。私の環境だとirkitd303ですね。</description>
    </item>
    
    <item>
      <title>AS3で言うEnterFrame的なの</title>
      <link>http://naonya3.me/post/2013/06/13/cadisplaylink/</link>
      <pubDate>Thu, 13 Jun 2013 21:18:00 +0900</pubDate>
      
      <guid>http://naonya3.me/post/2013/06/13/cadisplaylink/</guid>
      <description>Objective-Cでたまに使いたくなって、いつも忘れるのでメモ
CADisplayLink使う方法
QuartzCoreが必要
#import &amp;lt;QuartzCore/QuartzCore.h&amp;gt;  で
_displayLink = [CADisplayLink displayLinkWithTarget:self selector:@selector(_enterFrameHandler:)]; [_displayLink addToRunLoop:[NSRunLoop currentRunLoop] forMode:NSRunLoopCommonModes];  これで
- (void)_enterFrameHandler:(CADisplayLink *)displayLink { // 何らかの処理 }  でOK。メソッド名はもうちょっとObjC風にしてあげて。
ポーズは
_displayLink.paused = YES;  </description>
    </item>
    
    <item>
      <title>Copy.comを画像ストレージにする</title>
      <link>http://naonya3.me/post/2013/05/25/strage-service-copy/</link>
      <pubDate>Sat, 25 May 2013 21:18:00 +0900</pubDate>
      
      <guid>http://naonya3.me/post/2013/05/25/strage-service-copy/</guid>
      <description>Qiitaや僕の大好きなMarkdownに画像を表示したい時、画像の置き場に困っていました。
つまるところ、無料で使えていい具合のストレージサービスを探していた訳です。
WEBに埋め込むのだから、直接画像に対して固有のURLが発行される事が条件です。 また、後々画像を移動させることもあるかもしれないので、ローカルには画像を残しておきたい。
そういう所だと、Dropboxの様にローカルのフォルダと同期出来るものが好ましかったのですがDropboxはあいにく個人的なファイルで容量が心許ないです。
有料アカウントにしてもいいですが、やっぱり無料でできるならやりたい。
そんな無料で大容量で画像に直リンクできちゃうストレージサービスどこかに無いかなー。
ありました！
Copy
なんと始めから15GBの容量が付いてきます。もちろん無料。始めた事をShareするとさらに+2GB！
しかも、しかも、この招待リンクから登録していただくとお互いに+5GBと
お得でWin-Winな設定になっております。
まだ、対応サービスが少ないですが画像ストレージ的には困らないので 初回登録の容量が大きいうちに登録してWin-Winしておく事をおすすめします（再掲
大事なURLなので、もう一度リンクを貼っておきますね。
Copy
で、画像への直リンクの取得方法ですが、Copyのクライアントをインストールした方は 対象ディレクトリ以下のファイルを右クリックで
これだけでURLがコピーされます。というか、これだけで公開されちゃうので注意してください。
ブラウザで直接アクセスするとリダイレクトされますが、&amp;lt;img&amp;gt;とかで指定する分には平気です。（2013.05.23現在
15GBもあればしばらく画像置き場に困らないはずです\^q\^</description>
    </item>
    
    <item>
      <title>WEBアプリのMarkdownエディタStackEditが便利</title>
      <link>http://naonya3.me/post/2013/05/24/stack-edit/</link>
      <pubDate>Fri, 24 May 2013 21:18:00 +0900</pubDate>
      
      <guid>http://naonya3.me/post/2013/05/24/stack-edit/</guid>
      <description>議事録やメモをとる時、Markdownで書くことが多いのですが、普段はMouやKobitoを使っています。(リアルタイムプレビューが必要なければなんだって書けるのですけど)
ただ、いちいちアプリを立ち上げるのが面倒すぎて頭の毛が抜けかかっていた所に、いい感じのWEBアプリを教えて貰らいました。
StackEditです。
リアルタイムプレビューはもちろん、Dropboxへ保存したり、読み込んだりもできちゃいます。
Google Driveにも対応しているので、議事録をとったらそのままDriveにアップして共有！なんてこともできちゃいますね！
Chromeアプリにもなっているので、
みんなインストールしちゃえばいいよ
ちなみにソースがGitHubで公開されているので、他のサービスと連携したかったら自分で追加できると思います。(たぶん</description>
    </item>
    
    <item>
      <title>2013年の抱負</title>
      <link>http://naonya3.me/post/2013/01/17/2013year/</link>
      <pubDate>Thu, 17 Jan 2013 21:18:00 +0900</pubDate>
      
      <guid>http://naonya3.me/post/2013/01/17/2013year/</guid>
      <description>新年明けましておめでとうございます。
せっかく何度目か分からないblogを立ち上げたので、今年の抱負を書いておきます。
##結婚生活に慣れる
私事ですが、先月入籍致しました。
もう６年も付き合い４年も一緒に暮らしていますが、結婚を機にお互いもっと相手を思いやれる行動が出来るようになりたいと思います。
あと、僕はもっと稼げるようになりたいです。
早く子供は欲しいと思っていて、子供がなにか好きな事をやりたい時、（甘やかすつもりはありませんが）お金の問題であきらめなきゃいけないなんて、 本当につまらない事だとおもうので、がっつり稼ぎたいです。
式は２月２４日を予定しております。Facebook/Twitter等で見かけたら、暖かく見守って頂けたらと幸いです。
##個人サービスをリリース
インスタレーションやサイネージ、ツール的なアプリも作るの好きなのですが、 やっぱり僕は”場”を作りたいと、最近改めて感じるようになりました。
小学生の頃からwebページを作リ初めて（ホームページって呼んでましたね）何を一番最初にやったかって言うと、 CGIの掲示板を開設することでした。その後チャットなども開設して、部活の友達やクラスの仲がいい奴と遅くまで話していました。
たぶんそれがすごく楽しかったから、今でもweb制作続けているのだし、大学に入ってからですがサーバサイドの言語も勉強したのだと思います。 アフィリエイトが流行りだした時期でそういう下心もあった事は否定しないけど！！
という事で、本質に戻って今年は人が集まるサービス作りたいです。
##iOSアプリもリリース
iPhoneでてすぐデベロッパー登録したにも関わらず、まだ個人で何もリリースしていません。
このままでは死ねないので、しょぼくていいので何かリリースしたい。
あわよくば有料で売ってThunderbolt Display買える位稼ぎたい。
これは別にサービスじゃ無くてもいいかな。
##Rubyを扱えるようになる
上の個人サービスをリリースに関係するのですが、空き時間でサービスを作る上でスピード感は大切だと思うので、 なんだか制作スピード上がりそうなRuby on Railsを使う為です。あと日本発の言語を日本のプログラマーが嗜んでなくてどうする。
あと、モテそうだからです。
##まとめ
とりあえず、まとめると
ぐだぐだ言ってないで、とっととつくる一年にします。
仕事では真面目に良いものつくってるので、個人では不完全でしょぼくても良いので、がんがん短いスパンで どんどんアウトプットして行きたい所存です！
2013年、みなさまよろしくお願い致します。</description>
    </item>
    
  </channel>
</rss>